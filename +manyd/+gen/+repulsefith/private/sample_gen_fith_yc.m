function x_samp = sample_gen_fith_yc(nx_samp,n_dim,seed,param)
%*****************************************************************************80
%
%% SAMPLE_GEN_FITH generate a quasi-uniform sample by filling in the biggest gap in each projected dimension
%
%  Modified:
%
%    04 November 2014
%
%  Parameters:
%
%    Input, nx_samp, number of generated sample points.
%
%    Input, n_dim, dimension sample points are generated.
%
%    Input, x_seed, sample points generated by other methods.

% it can also be used to add sample points to any list of samples, such
% as adding a few points to a latin hypercube sample.

x_samp = NaN(nx_samp,n_dim);
n = size(param,1);
x_samp(1:n,:) = param;
% generate a bunch of point and pick the one furthest from all the existing
% points
% rng(seed,'v4'); % fix random number seed for repeatablity
for ix = n+1:nx_samp
    n_new = ix;
    x_new = rand(n_new,n_dim);
    % x_new = sample_gen(n_new,n_dim,'BGLHC',3);
    
    % compute the distances to all current points
    D = zeros(ix-1,n_new);
    for i1 = 1:n_new
        for i2 = 1:ix-1
            dis1 = abs(x_new(i1,:)-x_samp(i2,:));
            dis2 = 1-dis1;
            dis = min([dis1;dis2]);
            D(i2,i1)= norm(dis);
        end
    end
    
    % choose the candidate point
    [~ ,i_max] = max(min(D));
    x_samp(ix,:) = x_new(i_max,:);
    % continue
    
    itern = 5;
    for iter = 1:itern
        % do correction
        option = 1;
        % coef = nx_samp;
        coef = 100;
        switch option
            case 1
                % f is proportional to
                % (0.5-|x-x_i|)(x-x_i)/|x-x_i|
                % x-x_i
                D = repmat(x_samp(ix,:),ix-1,1)-x_samp(1:ix-1,:);
                Da = abs(D)+eps;
                F = (0.5-Da).*D./Da;
            case 2
                % f is proportional to
                % (x-x_i)/|x-x_i|^3+(x-x_i')/|x-x_i'|^3
                % x_i' is x_i+1 or x_i-1 so that x is between
                % x_i and x_i': x-x_i'=x-x_i-sign(x-x_i)
                % x-x_i
                D1 = repmat(x_samp(ix,:),ix-1,1)-x_samp(1:ix-1,:);
                % x-x_i'
                D2 = D1-sign(D1);
                D1a = abs(D1)+eps;
                D2a = abs(D2)+eps;
                F = D1./D1a.^3+D2./D2a.^3;
        end
        % resultant force
        f = sum(F);
        % nondimensionalization
        bound = coef*norm(f,inf);
        md = f/bound;
        x_samp(ix,:) = x_samp(ix,:)+md;
        x_samp(ix,:) = x_samp(ix,:) + (x_samp(ix,:)<0) - (x_samp(ix,:)>1);
    end
end
end

